// def install_test_dependencies(cache_prefix) {
//       /* restore cache with key: << parameters.cache_prefix >>-dependencies-{{ checksum "dev-requirements.txt" }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }} */
//       sh '''
//         pip install -r dev-requirements.txt --user
//         pip install -r test-requirements.txt --user
//         pip install -e '.[dispatcher]' --user
//       '''
//       /* save cache with relevant paths and key */
//   }
//   def pytest(target){
//       echo "running pytest << target >>"
//       sh '''
//         pytest \
//               -n 4 \
//               --cov-report term-missing \
//               --cov=<< parameters.target >> \
//               << parameters.target >>/tests \
//               --junitxml=test-results/<< parameters.target >>.xml
//       '''
//   }
//   enum projects{
//       cloudify_rest_client, cloudify_dsl_parser, cloudify_plugins
//   }
  /*def build_docs(enum){

  }
*/

pipeline {
  agent {
    kubernetes {
      label 'common'
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-common')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  environment {
    branch = "${env.BRANCH_NAME}"
    workspace = "${env.WORKSPACE}"
    project = "cloudify-common"
    stage_dir = "cloudify-common"
    cfy_manager_url = 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager'
    cfy_node_rpm = 'http://repository.cloudifysource.org/cloudify/components/nodejs-12.16.1-1nodesource.x86_64.rpm'
  }
  stages{
    //   stage ('py3_compat'){
    //     steps{
    //         sh "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat"  
    //         container('py27'){
    //             dir("${env.WORKSPACE}/py3_compat"){
                    
    //                 echo 'install futurize, remove compat modules and find python3-incompatible code'
    //                 sh '''#!/bin/bash
    //                 pip install future --user
    //                 PATH=$PATH:~/.local/bin
                
    //                 rm cloudify/_compat.py
    //                 rm dsl_parser/_compat.py
    //                 rm cloudify_rest_client/_compat.py
    //                 rm cloudify/ctx_wrappers/ctx-py.py
                
    //                 FUTURIZE="futurize ."
    //                 while read line; do
    //                     [[ "$line" =~ ^#.* ]] && continue
    //                     FUTURIZE="${FUTURIZE} -f ${line}"
    //                 done<.circleci/py3fixers
    //                 $FUTURIZE>futurize_diffs
    //                 '''
    //                 echo 'check that there is no python3-incompatible code'
    //                 sh ''' #!/bin/bash
    //                     if [[ -s futurize_diffs ]]; then
    //                       echo "Python-3-incompatible code found"
    //                       cat futurize_diffs
    //                       exit 1
    //                     fi          
    //                 '''
    //         }
    //       }
    //     }
    //   }
      stage('flake8_py27'){
          steps{
              sh "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8"

              container('py27'){
                dir("${env.WORKSPACE}/flake8") {
                  echo 'install flake 8'
                  sh "pip install flake8 --user"
                  echo 'run flake8'
                  sh '''PATH=$PATH:~/.local/bin
                        python -m flake8 dsl_parser script_runner cloudify cloudify_rest_client
                  '''
              }
            }
          }
      }
    //   stage('flake8_py36'){
    //       steps{
    //           container('py36'){
    //               
    //               echo 'install flake 8'
    //               sh "pip install flake8 --user"
    //               echo 'run flake8'
    //               sh "flake8 dsl_parser script_runner cloudify cloudify_rest_client"
    //           }
    //       }
    //   }
    //   stage('test_py26'){
    //       steps{
    //           container('py26'){
    //               
    //               echo 'setup_py26 - Install and set python version with pyenv'
    //               sh '''
    //                 set -eux
    //                 git clone https://github.com/yyuu/pyenv.git ~/.pyenv
    //                 export PYENV_ROOT="$HOME/.pyenv"
    //                 export PATH="$PYENV_ROOT/bin:$PATH"
    //                 echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $BASH_ENV
    //                 echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> $BASH_ENV
    //                 sudo apt-get install -y build-essential libssl1.0-dev zlib1g-dev xz-utils
    //                 echo -e 'if [ $SHLVL = 1 ]; then eval "$(pyenv init -)"; fi' >> $BASH_ENV
    //                 pyenv install 2.6.9
    //                 pyenv global 2.6.9
    //             '''
    //                 install_test_dependencies(py26)
    //                 pytest(dsl_parser)
    //                 pytest(script_runner)
    //                 pytest(cloudify)
    //                 /* storte test results in path: test-results */
    //           }
    //       }
    //   }
    //   stage('test_py27'){
    //       steps{
    //           container('py27'){
    //                 
    //                 install_test_dependencies(py27)
    //                 pytest(dsl_parser)
    //                 pytest(script_runner)
    //                 pytest(cloudify)
    //                 /* storte test results in path: test-results */
    //           }
    //       }
    //   }
    //   stage('test_py36'){
    //       steps{
    //           container('py36'){
    //                 
    //                 install_test_dependencies(py36)
    //                 pytest(dsl_parser)
    //                 pytest(script_runner)
    //                 pytest(cloudify)
    //                 /* storte test results in path: test-results */
    //           }
    //       }
    //   }
    //   stage('build_all_project_docs'){
    //         steps{
    //             container('py27'){
    //                 
    //                 /* restore cache with relevant keys */
    //                 echo 'Install sphinx'
    //                 sh "pip install sphinx sphinx-rtd-theme"
    //                 echo 'Install cloudify-common'
    //                 sh "pip install ."
    //                 /* save cache */
    //       }
    //     }
    //   }
  }        
}