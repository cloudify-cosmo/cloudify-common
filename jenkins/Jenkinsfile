def install_test_dependencies(String cache_prefix) {
  sh script: '''#!/bin/bash
  pip install -r test-requirements.txt --user
  pip install -e '.[dispatcher]' --user
  ''', label: "install test dependencies"
}
def pytest(String target){
  sh script: """#!/bin/bash
  pytest \
    -n auto \
    --cov-report term \
    --cov=${target} \
    --cov-fail-under 60 \
    ${target}/tests \
    --junitxml=test-results/${target}.xml
  """, label: "pytest << ${target} >>"
}
def build_docs(String project){
  sh script: """
  #!/bin/bash
  sphinx-build \
    -d _build/doctrees \
    -D version="\$(python setup.py --version)" \
    docs/${project} \
    docs/${project}/_build/html
  """, label: "build docs for ${project}"
}
def upload_docs(String project, String path){
  echo "upload docs to S3 for ${project}"
  uploadToDocsS3(
    "${env.WORKSPACE}/project-docs/docs/${project}/_build/html",
    "${path}/"
  )
}
@Library('pipeline-shared-library') _
pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-common')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    PROJECT = "cloudify-common"
    VERSION = getVersion("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    PRERELEASE = getPreRelease("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    WORKSPACE = "${env.WORKSPACE}"
    PATH = "/root/.local/bin:$PATH"
  }
  stages{
    stage ('compatability and flake8') {
      parallel{
        stage ('py3_compat'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/py3_compat"){
                echo 'Prepare for py3compat'
                sh '''#!/bin/bash
                PATH=$PATH:~/.local/bin
                rm cloudify/_compat.py
                rm dsl_parser/_compat.py
                rm cloudify_rest_client/_compat.py
                rm cloudify/ctx_wrappers/ctx-py.py
                rm -rf cloudify_async_client/
                '''
                py3Compat()
              }
            }
          }
        }
        stage('flake8_py27'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh "pip install flake8 --user"
                echo 'run flake8'
                sh "python -m flake8 dsl_parser script_runner cloudify cloudify_rest_client"
              }
            }
          }
        }
        stage('flake8_py36'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py36'){
              dir("${env.WORKSPACE}/flake8") {
              echo 'install flake 8'
              sh "pip install flake8 --user"
              echo 'run flake8'
              sh "python -m flake8 dsl_parser script_runner cloudify cloudify_rest_client cloudify_async_client"
              }
            }
          }
        }
      }
    }
    stage('tests'){
      parallel{
        stage('test_py27'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/test-py27 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-py27", label: "copying repo to seperate workspace"
            container('py27'){
              dir("${env.WORKSPACE}/test-py27") {
                install_test_dependencies('py27')
                pytest('dsl_parser')
                pytest('script_runner')
                pytest('cloudify')
                pytest('cloudify_rest_client')
              }
            }
          }
          post {
            always {
              junit '**/test-results/*.xml'
            }
          }
        }
        stage('test_py36'){
          steps{
            sh script: "mkdir -p ${env.WORKSPACE}/test-py36 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-py36", label: "copying repo to seperate workspace"
            container('py36'){
              dir("${env.WORKSPACE}/test-py36") {
                install_test_dependencies('py36')
                pytest('dsl_parser')
                pytest('script_runner')
                pytest('cloudify')
                pytest('cloudify_rest_client')
              }
            }
          }
          post {
            always {
              junit '**/test-results/*.xml'
            }
          }
        }
      }
    }
    stage('build_and_upload_all_project_docs'){
      when { branch pattern: ".+-build", comparator: "REGEXP"}
      steps{
        sh script: "mkdir -p ${env.WORKSPACE}/project-docs && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/project-docs", label: "copying repo to seperate workspace"
        container('py27'){
          dir("${env.WORKSPACE}/project-docs") {
            echo 'Install sphinx'
            sh "pip install sphinx sphinx-rtd-theme"
            echo 'Install cloudify-common'
            sh "pip install ."
            build_docs('cloudify_plugins_common')
            build_docs('cloudify_rest_client')
            build_docs('cloudify_script_plugin')
            build_docs('cloudify_dsl_parser')
          }
        }
      }
      post {
        success {
          upload_docs('cloudify_plugins_common', 'cloudify-plugins-common')
          upload_docs('cloudify_rest_client', 'cloudify-rest-client')
          upload_docs('cloudify_script_plugin', 'cloudify-script-plugin')
          upload_docs('cloudify_dsl_parser', 'cloudify-dsl-parser')
        }
      }
    }
  }
}
