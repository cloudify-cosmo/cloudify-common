def install_test_dependencies(String cache_prefix) {
  /* restore cache with key: << parameters.cache_prefix >>-dependencies-{{ checksum "dev-requirements.txt" }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }} */
  sh '''#!/bin/bash
  pip install -r dev-requirements.txt --user
  pip install -r test-requirements.txt --user
  pip install -e '.[dispatcher]' --user
  '''
  /* save cache with relevant paths and key */
}
def pytest(String target){
  echo "running pytest << ${target} >>"
  sh """#!/bin/bash
  pytest \
    -n 4 \
    --cov-report term-missing \
    --cov= ${target} \
    ${target}/tests \
    --junitxml=test-results/ ${target}
  """
}
def build_docs(String project){
  echo "build docs for ${project}"
  sh """
  #!/bin/bash
  sphinx-build \
    -d _build/doctrees \
    -D version="\$(python setup.py --version)" \
    docs/${project} \
    docs/${project}/_build/html
  """
}
def upload_docs(String project){
  echo "upload docs to S3 for ${project}"
  uploadToReleaseS3(
    "${env.WORKSPACE}/project-docs/docs/${project}", 
    "${env.VERSION}", 
    "${env.PRERELEASE}", 
    "${env.UPLOAD_FOLDER}", 
    BRANCH_BUILD_NUMBER, 
    "${env.BUILD_NUMBER}"
  )
}
@Library('pipeline-shared-library@script-wrapper') _
pipeline {
  parameters {
    string(name: 'VERSION', defaultValue: '5.1.0', description: 'Cloudify version label, to be used in the filenames (eg. "5.1.0")')
    string(name: 'PRERELEASE', defaultValue: '.dev1', description: 'A prerelase/milestone label, to be used in the filenames (eg. ".dev1")')
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch name for cloudify-agent')
  }
  agent {
    kubernetes {
      label 'common'
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  options {
    checkoutToSubdirectory('cloudify-common')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    VERSION = "${params.VERSION}"
    PRERELEASE = "${params.PRERELEASE}"
    BRANCH = "${params.BRANCH}"
    UPLOAD_S3_BUILD_NUMBER = "${params.UPSTREAM_BUILD_NUMBER}"
    WORKSPACE = "${env.WORKSPACE}"
    PROJECT = "cloudify-common"
    UPLOAD_FOLDER = 'cloudify-common'
    STAGE_DIR = "cloudify-common"
    PATH= "/root/.local/bin:$PATH"
    CFY_MANAGER_URL = 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager'
    CFY_NODE_RPM = 'http://repository.cloudifysource.org/cloudify/components/nodejs-12.16.1-1nodesource.x86_64.rpm'
  }
  stages{
    stage ('compatability and flake8') {
      parallel{
        stage ('py3_compat'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/py3_compat && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/py3_compat"
            container('py27'){
              dir("${env.WORKSPACE}/py3_compat"){
                echo 'install futurize, remove compat modules and find python3-incompatible code'
                wrapper.script script: '''#!/bin/bash
                pip install future --user
                PATH=$PATH:~/.local/bin
                rm cloudify/_compat.py
                rm dsl_parser/_compat.py
                rm cloudify_rest_client/_compat.py
                rm cloudify/ctx_wrappers/ctx-py.py
                FUTURIZE="futurize ."
                while read line; do
                  [[ "$line" =~ ^#.* ]] && continue
                  FUTURIZE="${FUTURIZE} -f ${line}"
                done<.circleci/py3fixers
                $FUTURIZE>futurize_diffs
                ''', returenStdout: true, stepName: "py3compat"

                echo 'check that there is no python3-incompatible code'
                sh """ #!/bin/bash
                if [ -s futurize_diffs ]; then
                  echo "Python-3-incompatible code found"
                  cat futurize_diffs
                  exit 1
                fi          
                """
              }
            }
          }
        }
        stage('flake8_py27'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8"
            container('py27'){
              dir("${env.WORKSPACE}/flake8") {
                echo 'install flake 8'
                sh "pip install flake8 --user"
                echo 'run flake8'
                sh "python -m flake8 dsl_parser script_runner cloudify cloudify_rest_client"
              }
            }
          }
        }
        stage('flake8_py36'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8"
            container('py36'){
              dir("${env.WORKSPACE}/flake8") {
              echo 'install flake 8'
              sh "pip install flake8 --user"
              echo 'run flake8'
              sh "python -m flake8 dsl_parser script_runner cloudify cloudify_rest_client"
              }
            }
          }
        }
      }
    }
    stage('tests'){
      parallel{
        stage('test_py26'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/test-py26 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-py26"
            container('py26'){
              dir("${env.WORKSPACE}/test-py26") {
                echo 'setup_py26 - Install and set python version with pyenv'
                sh '''
                #!/bin/bash
                set -eux
                git clone https://github.com/yyuu/pyenv.git ~/.pyenv
                export PYENV_ROOT="$HOME/.pyenv"
                export PATH="$PYENV_ROOT/bin:$PATH"
                echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
                sudo apt-get install -y build-essential libssl1.0-dev zlib1g-dev xz-utils
                echo 'if [ -e $SHLVL = 1 ]; then
                  echo 'eval "\$(pyenv init -)"' >> ~/.bashrc
                  echo 'eval "\$(pyenv virtualenv-init -)"' >> ~/.bashrc
                  fi'
                pyenv install 2.6.9
                pyenv global 2.6.9
                '''    
                install_test_dependencies('py26')
                pytest('dsl_parser')
                pytest('script_runner')
                pytest('cloudify')
                /* store test results in path: test-results
                */
              }
            }
          }
        }
        stage('test_py27'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/test-py27 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-py27"
            container('py27'){
              dir("${env.WORKSPACE}/test-py27") {
                install_test_dependencies('py27')
                pytest('dsl_parser')
                pytest('script_runner')
                pytest('cloudify')
                /* storte test results in path: test-results */
              }
            }
          }
        }
        stage('test_py36'){
          steps{
            sh "mkdir -p ${env.WORKSPACE}/test-py36 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test-py36"
            container('py36'){
              dir("${env.WORKSPACE}/test-py36") {
                install_test_dependencies('py36')
                pytest('dsl_parser')
                pytest('script_runner')
                pytest('cloudify')
                /* store test results in path: test-results */
              }
            }
          }
        }
      }
    }
    stage('build_all_project_docs'){
      when { branch pattern: ".+-build", comparator: "REGEXP"}
      steps{
        sh "mkdir -p ${env.WORKSPACE}/project-docs && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/project-docs"
        container('py27'){
          dir("${env.WORKSPACE}/project-docs") {
            /* restore cache with relevant keys */
            echo 'Install sphinx'
            sh "pip install sphinx sphinx-rtd-theme"
            echo 'Install cloudify-common'
            sh "pip install ."
            build_docs('cloudify_plugins_common')
            build_docs('cloudify_rest_client')
            build_docs('cloudify_script_plugin')
            build_docs('cloudify_dsl_parser')
            /* save cache */
          }
        }
      }
    }
    stage('deploy_all_project_docs'){
      when { branch pattern: ".+-build", comparator: "REGEXP"}
      environment {
        BRANCH_BUILD_NUMBER = "${env.BRANCH_NAME.split('-')[0]}"
      }
      steps{
        container('py27'){
          dir("${env.WORKSPACE}/project-docs"){
            upload_docs('cloudify_plugins_common')
            upload_docs('cloudify_rest_client')
            upload_docs('cloudify_script_plugin')
            upload_docs('cloudify_dsl_parser')
          }
        }
      }
    }
  }
}
